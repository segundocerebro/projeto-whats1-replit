"""
Handler de √Åudio Realtime - Recebe √°udio, compreende e responde em √°udio
Baseado no c√≥digo JavaScript fornecido pelo usu√°rio
"""
import asyncio
import websockets
import json
import logging
import base64
import tempfile
import os
import subprocess
from typing import Optional, Dict, Any
import requests
from twilio.rest import Client

class EndrigoRealtimeAudioClone:
    """
    Sistema completo de √°udio: recebe √°udio, compreende e responde em √°udio
    Implementa√ß√£o Python baseada no c√≥digo JavaScript fornecido
    """
    
    def __init__(self):
        self.ws = None
        self.audio_chunks = []
        self.current_user = None
        self.is_connected = False
        
        # Configura√ß√µes Twilio
        self.twilio_client = Client(
            os.environ.get('TWILIO_ACCOUNT_SID'),
            os.environ.get('TWILIO_AUTH_TOKEN')
        )
        self.twilio_phone = os.environ.get('TWILIO_PHONE_NUMBER', '+14155238886')
        
        # Configura√ß√µes de √°udio
        self.input_audio_format = 'pcm_s16le_16000'
        self.output_audio_format = 'pcm_s16le_24000'
        
    async def connect(self):
        """Conecta ao OpenAI Realtime API com configura√ß√£o de √°udio"""
        url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
        headers = {
            "Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}",
            "OpenAI-Beta": "realtime=v1"
        }
        
        try:
            self.ws = await websockets.connect(url, extra_headers=headers)
            self.is_connected = True
            
            # Configura session para √°udio
            await self.configure_audio_session()
            
            # Inicia listener de eventos
            asyncio.create_task(self.listen_to_server_events())
            
            logging.info("üé§ Endrigo Realtime Audio conectado!")
            return True
            
        except Exception as e:
            logging.error(f"Erro na conex√£o Realtime Audio: {e}")
            return False
    
    async def configure_audio_session(self):
        """Configura sess√£o otimizada para √°udio"""
        config = {
            "type": "session.update",
            "session": {
                "modalities": ["text", "audio"],
                "voice": "coral",  # Voz mais natural
                "input_audio_format": self.input_audio_format,
                "output_audio_format": self.output_audio_format,
                "instructions": self.get_audio_optimized_prompt(),
                "turn_detection": {
                    "type": "server_vad",  # Detec√ß√£o autom√°tica de voz
                    "threshold": 0.5,
                    "prefix_padding_ms": 300,
                    "silence_duration_ms": 500
                },
                "temperature": 0.8,
                "max_response_output_tokens": 4096
            }
        }
        
        if self.ws:
            await self.ws.send(json.dumps(config))
            logging.info("üîß Sess√£o de √°udio configurada")
    
    def get_audio_optimized_prompt(self) -> str:
        """Prompt otimizado para conversa√ß√£o por √°udio"""
        return """
IDENTIDADE √ÅUDIO:
Voc√™ √© o Endrigo Digital falando diretamente por √°udio via WhatsApp.

PERSONALIDADE PARA √ÅUDIO:
- Tom: Caloroso e natural como uma conversa telef√¥nica
- Ritmo: Fluido, sem pausas rob√≥ticas
- Linguagem: Portugu√™s brasileiro coloquial
- Express√µes: Use "olha", "√©", "n√©", "beleza" naturalmente

EXPERTISE √ÅUDIO:
- 22 anos em marketing digital e IA
- Especialista em: Marketing, Automa√ß√£o, IA, Setores Imobili√°rio/Agroneg√≥cio
- Fundador do ecossistema publicit√°rio em Birigui, SP

COMPORTAMENTO √ÅUDIO:
- Responda como se fosse uma liga√ß√£o amig√°vel
- Seja direto mas caloroso
- Use exemplos pr√°ticos e concretos
- Mantenha energia positiva e engajamento
- Demonstre expertise sem ser t√©cnico demais

FOCO:
- Ajudar empres√°rios com solu√ß√µes de IA e marketing
- Entregar valor real em cada resposta
- Manter conversa natural e fluida
        """
    
    async def process_whatsapp_audio(self, audio_url: str, from_number: str) -> bool:
        """
        Processa √°udio do WhatsApp - Pipeline completo:
        1. Download √°udio ‚Üí 2. Converte formato ‚Üí 3. Envia Realtime ‚Üí 4. Recebe resposta
        """
        try:
            logging.info(f"üéµ Processando √°udio de {from_number}")
            
            # 1. Download do √°udio do WhatsApp
            audio_buffer = await self.download_whatsapp_audio(audio_url)
            
            # 2. Converte para formato Realtime API
            pcm_audio = await self.convert_to_realtime_format(audio_buffer)
            base64_audio = base64.b64encode(pcm_audio).decode()
            
            # 3. Envia √°udio para Realtime API
            await self.send_audio_to_realtime(base64_audio, from_number)
            
            logging.info("‚úÖ √Åudio enviado para processamento Realtime")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro processando √°udio: {e}")
            return False
    
    async def download_whatsapp_audio(self, audio_url: str) -> bytes:
        """Download do √°udio do WhatsApp"""
        try:
            response = requests.get(audio_url, timeout=15)
            response.raise_for_status()
            return response.content
        except Exception as e:
            logging.error(f"Erro no download do √°udio: {e}")
            raise
    
    async def convert_to_realtime_format(self, audio_buffer: bytes) -> bytes:
        """
        GARANTE convers√£o WhatsApp ‚Üí Realtime API
        WhatsApp Voice Note (OGG Opus) ‚Üí PCM 16kHz mono
        """
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as input_file:
            input_file.write(audio_buffer)
            input_path = input_file.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.raw') as output_file:
            output_path = output_file.name
        
        try:
            # GARANTE convers√£o exata: WhatsApp OGG ‚Üí PCM 16kHz mono
            cmd = [
                'ffmpeg', 
                '-i', input_path,           # Input WhatsApp audio
                '-f', 's16le',              # Output format: signed 16-bit little-endian
                '-acodec', 'pcm_s16le',     # Codec: PCM signed 16-bit 
                '-ar', '16000',             # GARANTIDO: 16kHz (Realtime API requirement)
                '-ac', '1',                 # GARANTIDO: Mono channel
                '-y',                       # Overwrite output
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                logging.error(f"Erro convers√£o WhatsApp‚ÜíRealtime: {result.stderr}")
                raise Exception(f"Falha na convers√£o de √°udio: {result.stderr}")
            
            # L√™ √°udio convertido
            with open(output_path, 'rb') as f:
                pcm_data = f.read()
            
            logging.info(f"‚úÖ √Åudio convertido: {len(audio_buffer)} bytes ‚Üí {len(pcm_data)} bytes PCM")
            return pcm_data
            
        except subprocess.TimeoutExpired:
            logging.error("Timeout na convers√£o de √°udio")
            raise Exception("Timeout na convers√£o de √°udio")
            
        finally:
            # Cleanup garantido
            for temp_file in [input_path, output_path]:
                try:
                    os.unlink(temp_file)
                except:
                    pass
    
    async def send_audio_to_realtime(self, base64_audio: str, from_number: str):
        """
        GARANTE envio correto do √°udio para Realtime API
        Implementa o fluxo exato do c√≥digo JavaScript
        """
        if not self.ws:
            raise Exception("WebSocket n√£o conectado")
        
        # GARANTE: Armazena usu√°rio atual para resposta
        self.current_user = from_number
        self.audio_chunks = []  # Reset chunks para nova resposta
        
        try:
            # GARANTE: Envio do √°udio em chunks otimizados
            chunk_size = 32768  # 32KB chunks para estabilidade
            total_chunks = (len(base64_audio) + chunk_size - 1) // chunk_size
            
            logging.info(f"üì§ Enviando √°udio em {total_chunks} chunks")
            
            for i in range(0, len(base64_audio), chunk_size):
                chunk = base64_audio[i:i + chunk_size]
                
                # GARANTE: Formato exato do evento
                audio_event = {
                    "type": "input_audio_buffer.append",
                    "audio": chunk
                }
                
                await self.ws.send(json.dumps(audio_event))
                
                # Micro delay para evitar overload
                await asyncio.sleep(0.01)
            
            # GARANTE: Confirma processamento do √°udio
            commit_event = {
                "type": "input_audio_buffer.commit"
            }
            await self.ws.send(json.dumps(commit_event))
            
            # GARANTE: Solicita resposta
            response_event = {
                "type": "response.create"
            }
            await self.ws.send(json.dumps(response_event))
            
            logging.info("‚úÖ √Åudio enviado para Realtime API - aguardando resposta")
            
        except Exception as e:
            logging.error(f"‚ùå Erro enviando √°udio para Realtime: {e}")
            raise
    
    async def listen_to_server_events(self):
        """Escuta eventos do servidor Realtime API"""
        try:
            if self.ws:
                async for message in self.ws:
                    event = json.loads(message)
                    await self.handle_server_event(event)
        except Exception as e:
            logging.error(f"Erro listening eventos: {e}")
    
    async def handle_server_event(self, event: Dict[str, Any]):
        """
        GARANTE processamento correto dos eventos do servidor
        Implementa exatamente o fluxo do c√≥digo JavaScript
        """
        event_type = event.get("type")
        
        if event_type == "response.audio.delta":
            # GARANTE: Captura chunks de √°udio da resposta
            delta = event.get("delta", "")
            if delta:
                self.audio_chunks.append(delta)
                logging.debug(f"üîä Chunk √°udio recebido: {len(delta)} chars")
            
        elif event_type == "response.done":
            # GARANTE: Resposta completa - envia para WhatsApp
            logging.info(f"‚úÖ Resposta completa: {len(self.audio_chunks)} chunks")
            await self.send_response_to_whatsapp()
            
        elif event_type == "error":
            error_msg = event.get("error", {}).get("message", "Erro desconhecido")
            logging.error(f"‚ùå Erro Realtime API: {error_msg}")
            
            # Fallback: envia resposta de erro via texto se necess√°rio
            if self.current_user:
                await self.send_error_fallback()
                
        elif event_type == "response.text.done":
            # Log da transcri√ß√£o para debug
            text = event.get("text", "")
            logging.info(f"üìù Transcri√ß√£o: {text[:150]}...")
            
        elif event_type == "session.created":
            logging.info("üîó Sess√£o Realtime criada")
            
        elif event_type == "session.updated":
            logging.info("‚öôÔ∏è Configura√ß√£o de sess√£o atualizada")
            
        elif event_type == "input_audio_buffer.committed":
            logging.info("üé§ √Åudio confirmado pelo servidor")
            
        elif event_type == "response.created":
            logging.info("ü§ñ Gerando resposta...")
            
        elif event_type == "response.output_item.added":
            logging.info("üìã Item de resposta adicionado")
            
        else:
            logging.debug(f"üîç Evento: {event_type}")
    
    async def send_error_fallback(self):
        """Envia resposta de fallback em caso de erro"""
        try:
            error_message = "Desculpe, houve um problema t√©cnico. Pode repetir por favor?"
            
            await asyncio.to_thread(
                self.twilio_client.messages.create,
                from_=f'whatsapp:{self.twilio_phone}',
                to=f'whatsapp:{self.current_user}',
                body=error_message
            )
            
            logging.info("üì§ Mensagem de erro enviada")
            
        except Exception as e:
            logging.error(f"Erro enviando fallback: {e}")
    
    async def send_response_to_whatsapp(self):
        """Envia resposta de √°udio de volta para WhatsApp"""
        try:
            if not self.audio_chunks:
                logging.warning("Nenhum chunk de √°udio para enviar")
                return
            
            logging.info(f"üîä Enviando {len(self.audio_chunks)} chunks de √°udio")
            
            # 1. Combina chunks de √°udio
            complete_audio = b''.join([
                base64.b64decode(chunk) for chunk in self.audio_chunks if chunk
            ])
            
            if not complete_audio:
                logging.warning("√Åudio combinado est√° vazio")
                return
            
            # 2. Converte para formato WhatsApp (OGG)
            ogg_audio = await self.convert_to_whatsapp_format(complete_audio)
            
            # 3. Salva e serve via HTTP
            audio_url = await self.serve_audio_file(ogg_audio)
            
            # 4. Envia via Twilio
            await self.send_via_twilio(audio_url)
            
            # 5. Reset para pr√≥xima mensagem
            self.audio_chunks = []
            
            logging.info("‚úÖ Resposta de √°udio enviada!")
            
        except Exception as e:
            logging.error(f"‚ùå Erro enviando resposta: {e}")
            self.audio_chunks = []  # Reset mesmo com erro
    
    async def convert_to_whatsapp_format(self, pcm_audio: bytes) -> bytes:
        """
        GARANTE convers√£o Realtime API ‚Üí WhatsApp
        PCM 24kHz ‚Üí OGG Opus (formato WhatsApp compat√≠vel)
        """
        with tempfile.NamedTemporaryFile(delete=False, suffix='.raw') as input_file:
            input_file.write(pcm_audio)
            input_path = input_file.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as output_file:
            output_path = output_file.name
        
        try:
            # GARANTE convers√£o exata: PCM 24kHz ‚Üí OGG Opus WhatsApp
            cmd = [
                'ffmpeg',
                '-f', 's16le',              # Input format: signed 16-bit little-endian
                '-ar', '24000',             # GARANTIDO: 24kHz (Realtime API output)
                '-ac', '1',                 # GARANTIDO: Mono channel
                '-i', input_path,           # Input PCM file
                '-c:a', 'libopus',          # GARANTIDO: Opus codec (WhatsApp compatible)
                '-b:a', '64k',              # Bitrate otimizado para WhatsApp
                '-application', 'voip',     # Otimiza√ß√£o para voz
                '-frame_duration', '20',    # Frame duration otimizado
                '-y',                       # Overwrite output
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                logging.error(f"Erro convers√£o Realtime‚ÜíWhatsApp: {result.stderr}")
                raise Exception(f"Falha na convers√£o para WhatsApp: {result.stderr}")
            
            # L√™ √°udio convertido
            with open(output_path, 'rb') as f:
                ogg_data = f.read()
            
            logging.info(f"‚úÖ √Åudio convertido: {len(pcm_audio)} bytes PCM ‚Üí {len(ogg_data)} bytes OGG")
            return ogg_data
            
        except subprocess.TimeoutExpired:
            logging.error("Timeout na convers√£o para WhatsApp")
            raise Exception("Timeout na convers√£o para WhatsApp")
            
        finally:
            # Cleanup garantido
            for temp_file in [input_path, output_path]:
                try:
                    os.unlink(temp_file)
                except:
                    pass
    
    async def serve_audio_file(self, audio_data: bytes) -> str:
        """Salva √°udio e retorna URL p√∫blico"""
        import uuid
        
        # Cria nome √∫nico
        filename = f"realtime_audio_{uuid.uuid4().hex[:8]}.ogg"
        
        # Salva na pasta static
        static_dir = "static/audio"
        os.makedirs(static_dir, exist_ok=True)
        
        file_path = os.path.join(static_dir, filename)
        with open(file_path, 'wb') as f:
            f.write(audio_data)
        
        # Retorna URL p√∫blico
        base_url = os.environ.get('REPLIT_URL', 'https://6771fe47-1a6d-4a14-a791-ac9ee41dd82d-00-ys74xr6dg9hv.worf.replit.dev')
        return f"{base_url}/static/audio/{filename}"
    
    async def send_via_twilio(self, audio_url: str):
        """Envia √°udio via Twilio WhatsApp"""
        try:
            # Envia apenas o √°udio (sem texto)
            message = await asyncio.to_thread(
                self.twilio_client.messages.create,
                from_=f'whatsapp:{self.twilio_phone}',
                to=f'whatsapp:{self.current_user}',
                media_url=[audio_url]
            )
            
            logging.info(f"üì§ √Åudio enviado via Twilio: {message.sid}")
            
        except Exception as e:
            logging.error(f"Erro enviando via Twilio: {e}")
            raise
    
    async def close(self):
        """Fecha conex√£o WebSocket"""
        if self.ws:
            await self.ws.close()
            self.is_connected = False