USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
runner       1  0.0  0.0 2373216 45204 ?       Ssl  17:51   0:01 /nix/store/796lvfhz7d84jr51is5zf92b6480xkyd-pid1-0.0.1/bin/pid1
runner      15  0.4  0.3 1510404 206448 ?      Sl   18:06   0:04 pid2 --no-deprecation /pid2/bundles/0.0.1584/server.cjs --json-logs --start-timestamp=1754244384032 --socket-listener-fd=3
runner      30  0.0  0.0   3984  2560 ?        S    18:06   0:00 nix-editor --return-output
runner     225 22.4  0.1 902488 69788 ?        S    18:22   0:02 pid2 --no-deprecation /pid2/bundles/0.0.1584/server.cjs --json-logs --start-timestamp=1754244384032 --socket-listener-fd=3
runner     226  0.1  0.0   7940  3712 pts/0    Ss+  18:22   0:00 /nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin/bash -rcfile /nix/store/vgmsjrn5bbcdwgqxy27njrq6n8scc2nc-replit-bashrc/bashrc -c  STAMP=$(date +%Y%m%d_%H%M%S) OUT_DIR="_diag_${STAMP}" mkdir -p "${OUT_DIR}"/{tree,configs,deps,git,logs,ops,evidence}  # Detectar arquivos-chave for f in .replit replit.nix pyproject.toml poetry.lock README.md .gitignore; do   [[ -f "$f" ]] && echo "$f" >> "${OUT_DIR}/configs/_present_files.txt" done  # √Årvore de arquivos find . -path './.git' -prune -o -path './node_modules' -prune -o -print | sort > "${OUT_DIR}/tree/full_tree.txt"  # Top arquivos por tamanho du -ah . 2>/dev/null | sort -hr | head -n 20 > "${OUT_DIR}/tree/top_20_files.txt"  # Arquivos modificados recentemente find . -type f -mtime -2 -not -path './.git/*' -not -path './node_modules/*' | sort > "${OUT_DIR}/tree/changed_last_2d.txt"  # Copiar configs importantes cp pyproject.toml "${OUT_DIR}/deps/" 2>/dev/null || true cp poetry.lock "${OUT_DIR}/deps/" 2>/dev/null || true cp .replit "${OUT_DIR}/configs/" 2>/dev/null || true cp README.md "${OUT_DIR}/configs/" 2>/dev/null || true  # Vari√°veis de ambiente (nomes apenas) env | sort | sed -E 's/=.*/=<REDACTED>/' > "${OUT_DIR}/ops/env_vars_redacted.txt"  # Encontrar logs find . \( -name '*.log' -o -name '*.out' -o -name '*.err' \) -type f -not -path './.git/*' | sort > "${OUT_DIR}/logs/_found_logs.txt"  # Coletar √∫ltimas 500 linhas de cada log while IFS= read -r f; do   if [[ -f "$f" ]]; then     echo -e "\n===== FILE: $f =====" >> "${OUT_DIR}/logs/tails_500.txt"     tail -n 500 "$f" 2>/dev/null >> "${OUT_DIR}/logs/tails_500.txt" || true   fi done < "${OUT_DIR}/logs/_found_logs.txt"  # Status do sistema ps aux | head -n 50 > "${OUT_DIR}/ops/ps_aux.txt" 2>/dev/null || true  # Sum√°rio {   echo "# Diagnostics Summary (${STAMP})"   echo "## Key Files Present"   cat "${OUT_DIR}/configs/_present_files.txt" 2>/dev/null || echo "None found"   echo -e "\n## Top 10 Largest Files"   head -n 10 "${OUT_DIR}/tree/top_20_files.txt" 2>/dev/null || echo "None found"   echo -e "\n## Recent Changes (2d) ‚Äì Files"   head -n 20 "${OUT_DIR}/tree/changed_last_2d.txt" 2>/dev/null || echo "None found"   echo -e "\n## Found Logs"   wc -l "${OUT_DIR}/logs/_found_logs.txt" 2>/dev/null || echo "0 logs found" } > "${OUT_DIR}/SUMMARY.md"  # Empacotar ARCHIVE="diagnostics_${STAMP}.tar.gz" tar -czf "${ARCHIVE}" "${OUT_DIR}"  echo "‚úÖ Bundle gerado: ${ARCHIVE}" echo "üìÅ Diret√≥rio: ${OUT_DIR}" 
runner     258  0.0  0.0  10956  3968 pts/0    R+   18:23   0:00 ps aux
runner     259  0.0  0.0   7952  2688 pts/0    S+   18:23   0:00 head -n 50
